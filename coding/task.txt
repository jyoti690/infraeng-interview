Infrastructure automation frequently requires using REST APIs to perform tasks, trigger jobs, or otherwise perform tasks outside that available to normal tooling.

Write a small client that will do the following.  
- Read the example.json file, validate that it is valid JSON.
- Modify the read structure to only include objects that have private set to false
- Connect as a web client to a web service over HTTPS  (assume the web service exists, no need to write the server side)
- Make a REST POST call, posting the selected JSON fragment to the endpoint /service/generate
- The web server response will be a JSON map of objects.  Print the key of every object that has a child attribute "valid" set to true\

Code in your preferred language i.e golang, python, perl, shell.  Place the code alongside the files in this directory.

The code does not need to be runnable or demonstrated, but should you should attempt to be as correct as possible.
Focus will be on any suitable error handling or logging to assist with debugging errors.
Features to support changing the target service or input source are a stretch goal

The expectation is you will be able to explain the code proposed during the interview.

import json
import logging
from pathlib import Path
from typing import List,Dict,Any
from urllib import request,error

url="https://asx.com.au/service/generate"
logging.basicConfig(level=logging.DEBUG)
current_dir=Path(__file__).parent
json_path=current_dir / "examples.json"

try:
     with open(json_path) as f:
        data=json.load(f)
        logging.info("Json is Valid")
except  FileNotFoundError:
    logging.warning("json file does not found")
except json.JSONDecodeError as e:
    logging.warning(f"File does not have proper json {e}")

def get_private_filter(data:Dict[str,Any]) -> Dict[str,Any]:
    filtered_data={}
    if not data:
        return filtered_data

    for key in data:
        try:
            name=data[key]
            print(name)
            dnszone=data[key]["dnszone"]
            targets=data[key]["targets"]
            private= data[key]["private"]
        except KeyError as e:
            logging.warning(f"key does not exist {e}")
            continue
        if data[key].get("private") is False:
            filtered_data[key]=data[key]
    return filtered_data

def post_private_filter(data:Dict[str , Any]) -> Dict[str , Any]:
    data=json.dumps(data).encode("utf-8")
    headers = {"Content-Type": "application/json"}
    req = request.Request(url, method="POST",data=data,headers=headers)
    try:
        with request.urlopen(req) as response:
            resp_data = response.read().decode("utf-8")
            print(resp_data)
    except error.HTTPError as e:
        logging.warning(f"Error is {e}")
    except error.URLError as e:
        logging.warning(f"error is {e}")
    except json.JSONDecodeError as e:
        logging.error(f"Failed to decode JSON response: {e}")
    valid_key=json.loads(resp_data)
    if not valid_key:
        return {}
    
    for key,val in valid_key.items():
        if val.get("valid") is True:
            print(key)
if __name__ == "__main__":  
    result=get_private_filter(data)
    post_private_filter(result)
    print(result)
