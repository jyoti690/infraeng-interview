The core of ASX infrastucture cloud automation is based on terraform.

Create a Terraform module with the following requiments for AWS Autoscaling group to run ephemeral EC2 instances:

The modules input should be:
1) Autoscaling group name
2) Load balancer URL 

Module requirements:

1) It should run the lastest version of Amazon Linux 2023 every time is launched
2) The EC2 instance should be accssible via SSM Session Manager
3) The EC2 instance /var/log/messages should be available on Cloud Watch Log
4) The auto scalling group should replace the instance every 30 days
5) Nginx must be installed and listening to port 80
6) The EC2 intances must be hosted on private subnets 

Bonus:
6) Create an application load balancer that listen TLS over HTTP and reaches the EC2 instances above on NGINX


code is in 
https://github.com/jyoti690/asx-terraform-modules
https://github.com/jyoti690/asx-terraform


#main module 
#aws/testing/aws-ec2-asg
├── main.tf       
module "aws_ec2_asg" {
  source  = "git::https://github.com/jyoti690/asx-terraform-modules.git//modules/aws/aws-ec2-asg?ref=v1.0.0"
  asg_name = "asg-testing"
  alb_dns_name = "testing.asx.com"
  
}

####
#aws/aws-ec2-asg
├── main.tf               
├── variables.tf          
├── user_data.sh       
├── lookup_alb.sh      
├── README.md 



# variables.tf
variable "asg_name" {
  type        = string
  description = "Name for AutoScaling Group"
}

variable "alb_dns_name" {
  type        = string
  description = "DNS name of the existing ALB"
}

# main.tf

# Lookup ALB info (including ARN, VPC ID, SGs, and certificate ARN) by DNS name

data "external" "alb_lookup" {
  program = ["${path.module}/lookup_alb.sh"]

  query = {
    alb_dns_name = var.alb_dns_name
  }
}

# Get latest Amazon Linux 2023 AMI
data "aws_ssm_parameter" "ami_amazon_linux_latest" {
  name = "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
}

# Fetch private subnets in the ALB VPC (filtering by "private" in the Name tag)
data "aws_subnets" "private" {
  filter {
    name   = "vpc-id"
    values = [data.external.alb_lookup.result.vpc_id]
  }

  filter {
    name   = "tag:Name"
    values = ["*private*"]
  }
}

locals {
  amazon_linux_2023_ami = data.aws_ssm_parameter.ami_amazon_linux_latest.value
  alb_name             = data.external.alb_lookup.result.name
  alb_arn              = data.external.alb_lookup.result.arn
  alb_vpc              = data.external.alb_lookup.result.vpc_id
  alb_security_group   = try(data.external.alb_lookup.result.security_groups[0], null)
  private_subnet_ids   = data.aws_subnets.private.ids
  certificate_arn      = data.external.alb_lookup.result.certificate_arn
}


# IAM role 
resource "aws_iam_role" "ec2_iam_role" {
  name = "${var.asg_name}-ec2-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action    = "sts:AssumeRole",
      Effect    = "Allow",
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "ssm" {
  role       = aws_iam_role.ec2_iam_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_role_policy_attachment" "cloudwatch_agent" {
  role       = aws_iam_role.ec2_iam_role.name
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
}

resource "aws_iam_instance_profile" "ec2_profile" {
  name = "${var.asg_name}-instance-profile"
  role = aws_iam_role.ec2_iam_role.name
}


# Security Group for EC2 instances - allow HTTP from ALB SG only
resource "aws_security_group" "ec2_sg" {
  name        = "${var.asg_name}-ec2-sg"
  description = "Allow HTTP from ALB security group"
  vpc_id      = local.alb_vpc

  ingress {
    description     = "Allow HTTP from ALB SG"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [local.alb_security_group]
  }
}

# Launch template for EC2
resource "aws_launch_template" "lt" {
  name_prefix   = "${var.asg_name}-lt-"
  image_id      = local.amazon_linux_2023_ami
  instance_type = "t3.micro"

  iam_instance_profile {
    name = aws_iam_instance_profile.ec2_profile.name
  }

  user_data = base64encode(file("${path.module}/user_data.sh"))

  network_interfaces {
    security_groups             = [aws_security_group.ec2_sg.id]
  }
}

# Auto Scaling Group on private subnets dynamically fetched
resource "aws_autoscaling_group" "asg" {
  name                 = var.asg_name
  desired_capacity     = 2
  max_size             = 2
  min_size             = 2
  vpc_zone_identifier  = local.private_subnet_ids

  launch_template {
    id      = aws_launch_template.lt.id
    version = "$Latest"
  }

  max_instance_lifetime = 2592000 # 30 days

  tag {
    key                 = "Name"
    value               = var.asg_name
    propagate_at_launch = true
  }
}

# Target group for ALB forwarding to EC2 on port 80
resource "aws_lb_target_group" "tg" {
  name        = "${var.asg_name}-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = local.alb_vpc
  target_type = "instance"

}

# Attach ASG to target group
resource "aws_autoscaling_attachment" "asg_attach" {
  autoscaling_group_name = aws_autoscaling_group.asg.name
  alb_target_group_arn   = aws_lb_target_group.tg.arn
}

# HTTPS listener for ALB, forwarding to ASG target group (only if certificate ARN is found)
resource "aws_lb_listener" "https" {
  count             = local.certificate_arn != null ? 1 : 0
  load_balancer_arn = local.alb_arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = local.certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

# CloudWatch Logs for /var/log/messages
resource "aws_cloudwatch_log_group" "messages" {
  name              = "/var/log/messages"
  retention_in_days = 14
}


#user_data.sh
#!/bin/bash
yum update -y
yum install -y nginx amazon-cloudwatch-agent
systemctl enable nginx
systemctl start nginx

cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
{
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/var/log/messages",
            "log_group_name": "/var/log/messages",
            "log_stream_name": "{instance_id}"
          }
        ]
      }
    }
  }
}
EOF

/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl   -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s


#lookup_alb.sh
#!/bin/bash
ALB_DNS_NAME=$(jq -r '.alb_dns_name' <<< "$QUERY")

ALB_INFO=$(aws elbv2 describe-load-balancers \
  --query "LoadBalancers[?DNSName=='${ALB_DNS_NAME}'] | [0]" \
  --output json)

ALB_ARN=$(jq -r '.LoadBalancerArn' <<< "$ALB_INFO")

# Get HTTPS Listener (port 443)
LISTENER=$(aws elbv2 describe-listeners \
  --load-balancer-arn "$ALB_ARN" \
  --query "Listeners[?Port==\`443\`] | [0]" \
  --output json)

CERT_ARN=$(jq -r '.Certificates[0].CertificateArn // empty' <<< "$LISTENER")

# Get security groups
SGS=$(jq -c '.SecurityGroups' <<< "$ALB_INFO")

# Output
jq -n --arg name "$(jq -r '.LoadBalancerName' <<< "$ALB_INFO")" \
      --arg arn "$ALB_ARN" \
      --arg vpc_id "$(jq -r '.VpcId' <<< "$ALB_INFO")" \
      --argjson security_groups "$SGS" \
      --arg certificate_arn "$CERT_ARN" \
      '{name: $name, arn: $arn, vpc_id: $vpc_id, security_groups: $security_groups, certificate_arn: $certificate_arn}'
